import Phaser from 'phaser';
import { CardContainer } from '../types';

export default class OrderEventsScene extends Phaser.Scene {
  private slots!: Phaser.GameObjects.Zone[];
  private cards!: CardContainer[];
  private correctOrder = ['1', '2', '3', '4'];
  private gameComplete = false;
  private lessonData: any = null;
  private validateButton: Phaser.GameObjects.Container | null = null;
  private cardCount = 4;
  private storySteps = [
    'Dieu parle √† Jonas',
    'Jonas fuit en bateau',
    'Dans le ventre du poisson',
    'Jonas ob√©it et pr√™che',
  ];

  // Versions courtes pour les cartes
  private shortStorySteps = [
    'Dieu parle\n√† Jonas',
    'Jonas fuit\nen bateau',
    'Dans le ventre\ndu poisson',
    'Jonas ob√©it\net pr√™che',
  ];

  constructor() {
    super('OrderEvents');
  }

  // Force la r√©initialisation compl√®te de la sc√®ne (cartes, slots, etc.)
  reloadScene() {
    this.scene.restart();
  }

  public setLessonData(data: any) {
    this.lessonData = data;
    console.log('üìö SetLessonData appel√© avec:', data?.id || 'pas de data');
    console.log('üìö Donn√©es compl√®tes:', data);

    // Nouvelle logique : si story_steps existe dans la le√ßon, l'utiliser pour le jeu d'ordre
    if (
      data &&
      Array.isArray(data.story_steps) &&
      data.story_steps.length > 0
    ) {
      // story_steps peut √™tre un tableau de cha√Ænes ou d'objets {title, content}
      const removeDayPrefix = (txt: string) =>
        txt.replace(/^Jour \d+ ?-? ?/i, '').trim();
      if (typeof data.story_steps[0] === 'string') {
        this.storySteps = data.story_steps.map((txt: string) =>
          removeDayPrefix(txt)
        );
        this.shortStorySteps = this.storySteps;
      } else {
        this.storySteps = data.story_steps.map((step: any) =>
          removeDayPrefix(step.title || step.content || '')
        );
        this.shortStorySteps = this.storySteps;
      }
      this.cardCount = this.storySteps.length;
      this.correctOrder = Array.from({ length: this.cardCount }, (_, i) => (i + 1).toString());
      console.log(
        'üü¢ storySteps dynamiques extraites du JSON:',
        this.storySteps
      );
      console.log('üéØ correctOrder mis √† jour:', this.correctOrder);
      // Red√©marre la sc√®ne pour afficher les nouvelles cartes
      this.reloadScene();
      return;
    }
    // Fallback legacy: anciens cas cod√©s en dur
    if (data && data.id) {
      switch (data.id) {
        case 'jonas_01':
          this.storySteps = [
            'Dieu parle √† Jonas',
            'Jonas fuit en bateau',
            'Dans le ventre du poisson',
            'Jonas ob√©it et pr√™che',
          ];
          this.shortStorySteps = [
            'Dieu parle\n√† Jonas',
            'Jonas fuit\nen bateau',
            'Dans le ventre\ndu poisson',
            'Jonas ob√©it\net pr√™che',
          ];
          break;
        case 'jonas_02_fuite':
          this.storySteps = [
            'Dieu donne la mission',
            'Jonas refuse et fuit',
            'Temp√™te sur la mer',
            'Jonas jet√© √† la mer',
          ];
          this.shortStorySteps = [
            'Dieu donne\nla mission',
            'Jonas refuse\net fuit',
            'Temp√™te\nsur la mer',
            'Jonas jet√©\n√† la mer',
          ];
          break;
        case 'jonas_03_ninive':
          this.storySteps = [
            'Jonas pr√™che √† Ninive',
            'Les habitants se repentent',
            'Le roi ordonne le je√ªne',
            'Dieu pardonne la ville',
          ];
          this.shortStorySteps = [
            'Jonas pr√™che\n√† Ninive',
            'Les habitants\nse repentent',
            'Le roi ordonne\nle je√ªne',
            'Dieu pardonne\nla ville',
          ];
          break;
        case 'jonas_04_ricin':
          this.storySteps = [
            'Jonas attend dehors',
            'Dieu fait pousser le ricin',
            'Un ver d√©truit le ricin',
            'Le√ßon de mis√©ricorde',
          ];
          this.shortStorySteps = [
            'Jonas attend\ndehors',
            'Dieu fait pousser\nle ricin',
            'Un ver d√©truit\nle ricin',
            'Le√ßon de\nmis√©ricorde',
          ];
          break;
        case 'daniel_01':
          this.storySteps = [
            'Daniel prie fid√®lement',
            'Les jaloux le d√©noncent',
            'Daniel jet√© aux lions',
            'Dieu ferme leur gueule',
          ];
          this.shortStorySteps = [
            'Daniel prie\nfid√®lement',
            'Les jaloux\nle d√©noncent',
            'Daniel jet√©\naux lions',
            'Dieu ferme\nleur gueule',
          ];
          break;
        case 'david_01':
          this.storySteps = [
            'Goliath d√©fie Isra√´l',
            'David se porte volontaire',
            'David lance sa pierre',
            'Goliath tombe, victoire !',
          ];
          this.shortStorySteps = [
            'Goliath d√©fie\nIsra√´l',
            'David se porte\nvolontaire',
            'David lance\nsa pierre',
            'Goliath tombe\nvictoire !',
          ];
          break;
        case 'creation_01':
          this.storySteps = [
            'Jour 1 : Dieu s√©pare la lumi√®re des t√©n√®bres',
            'Jour 2 : Dieu s√©pare les eaux et cr√©e le firmament',
            'Jour 3 : Dieu s√©pare la terre des mers et cr√©e les plantes',
            'Jour 4 : Dieu cr√©e le soleil, la lune et les √©toiles',
            'Jour 5 : Dieu cr√©e les poissons et les oiseaux',
            'Jour 6 : Dieu cr√©e les animaux terrestres et l\'homme',
            'Jour 7 : Dieu se repose et b√©nit le septi√®me jour'
          ];
          this.shortStorySteps = [
            'Jour 1 :\nLumi√®re/t√©n√®bres',
            'Jour 2 :\nEaux et firmament',
            'Jour 3 :\nTerre, mers, plantes',
            'Jour 4 :\nSoleil, lune, √©toiles',
            'Jour 5 :\nPoissons et oiseaux',
            'Jour 6 :\nAnimaux et homme',
            'Jour 7 :\nRepos de Dieu'
          ];
          this.cardCount = this.storySteps.length;
          this.correctOrder = Array.from({ length: this.cardCount }, (_, i) => (i + 1).toString());
          break;
        case 'moise_01':
          this.storySteps = [
            "Le peuple d'Isra√´l est esclave en √âgypte",
            'Mo√Øse re√ßoit la mission de Dieu',
            "Les dix plaies d'√âgypte",
            'La travers√©e de la mer Rouge',
          ];
          this.shortStorySteps = [
            "Le peuple d'Isra√´l\nest esclave en √âgypte",
            'Mo√Øse re√ßoit\nla mission de Dieu',
            "Les dix plaies\nd'√âgypte",
            'La travers√©e\nde la mer Rouge',
          ];
          break;
        case 'moise_buisson_01':
          this.storySteps = [
            'Mo√Øse garde les troupeaux dans le d√©sert',
            'Mo√Øse voit le buisson ardent qui ne se consume pas',
            'Dieu appelle Mo√Øse depuis le buisson',
            'Dieu dit √† Mo√Øse d\'√¥ter ses chaussures',
            'Dieu r√©v√®le son nom et sa mission',
            'Mo√Øse h√©site et exprime ses doutes',
            'Dieu rassure Mo√Øse et lui donne des signes',
          ];
          this.shortStorySteps = [
            'Mo√Øse garde les\ntroupeaux dans le d√©sert',
            'Mo√Øse voit le buisson\nardent qui ne se\nconsume pas',
            'Dieu appelle Mo√Øse\ndepuis le buisson',
            'Dieu dit √† Mo√Øse\nd\'√¥ter ses chaussures',
            'Dieu r√©v√®le son nom\net sa mission',
            'Mo√Øse h√©site et\nexprime ses doutes',
            'Dieu rassure Mo√Øse et\nlui donne des signes',
          ];
          break;
        case 'mer_rouge_01':
          this.storySteps = [
            'Les Isra√©lites arrivent au bord de la mer Rouge',
            'Mo√Øse √©tend sa main et les eaux se s√©parent',
            'Les Isra√©lites traversent √† pied sec',
            'Les eaux se referment sur l\'arm√©e de Pharaon',
          ];
          this.shortStorySteps = [
            'Les Isra√©lites arrivent\nau bord de la mer Rouge',
            'Mo√Øse √©tend sa main et\nles eaux se s√©parent',
            'Les Isra√©lites traversent\n√† pied sec',
            'Les eaux se referment sur\nl\'arm√©e de Pharaon',
          ];
          this.cardCount = this.storySteps.length;
          this.correctOrder = Array.from({ length: this.cardCount }, (_, i) => (i + 1).toString());
          console.log('üåä Mer Rouge - Nombre de cartes:', this.cardCount);
          break;
        case 'noe_01':
          this.storySteps = [
            'Dieu voit le mal sur la terre',
            "No√© construit l'arche",
            'Le d√©luge recouvre la terre',
            "L'alliance et l'arc-en-ciel",
          ];
          this.shortStorySteps = [
            'Dieu voit le mal\nsur la terre',
            "No√© construit\nl'arche",
            'Le d√©luge recouvre\nla terre',
            "L'alliance et\nl'arc-en-ciel",
          ];
          break;
        case 'tabernacle_01':
          this.storySteps = [
            'Dieu ordonne √† Mo√Øse de construire un sanctuaire',
            'Les Isra√©lites apportent des offrandes volontaires',
            'Construction de l\'arche de l\'alliance en bois d\'acacia',
            'R√©alisation du propitiatoire en or pur',
            'Fabrication du voile s√©parant le lieu saint',
            'Construction de l\'autel des holocaustes',
            'Mo√Øse consacre le tabernacle achev√©',
            'La nu√©e de Dieu remplit le sanctuaire',
          ];
          this.shortStorySteps = [
            'Dieu ordonne √† Mo√Øse\nde construire un sanctuaire',
            'Les Isra√©lites apportent\ndes offrandes volontaires',
            'Construction de l\'arche\nen bois d\'acacia',
            'R√©alisation du propitiatoire\nen or pur',
            'Fabrication du voile\ns√©parant le lieu saint',
            'Construction de l\'autel\ndes holocaustes',
            'Mo√Øse consacre le\ntabernacle achev√©',
            'La nu√©e de Dieu remplit\nle sanctuaire',
          ];
          this.cardCount = this.storySteps.length;
          this.correctOrder = Array.from({ length: this.cardCount }, (_, i) => (i + 1).toString());
          console.log('üèõÔ∏è Tabernacle - Nombre de cartes:', this.cardCount);
          break;
        case 'terre_promise_01':
          this.storySteps = [
            'Mo√Øse atteint l\'√¢ge de 120 ans',
            'Il gravit le mont Nebo dans le pays de Moab',
            'Dieu lui montre toute la terre promise',
            'Mo√Øse contemple le pays qu\'il ne peut poss√©der',
            'Dieu lui r√©v√®le que Josu√© guidera le peuple',
            'Mo√Øse meurt seul avec Dieu sur la montagne',
          ];
          this.shortStorySteps = [
            'Mo√Øse atteint l\'√¢ge\nde 120 ans',
            'Il gravit le mont Nebo\ndans le pays de Moab',
            'Dieu lui montre toute\nla terre promise',
            'Mo√Øse contemple le pays\nqu\'il ne peut poss√©der',
            'Dieu r√©v√®le que Josu√©\nguidera le peuple',
            'Mo√Øse meurt seul avec Dieu\nsur la montagne',
          ];
          this.cardCount = this.storySteps.length;
          this.correctOrder = Array.from({ length: this.cardCount }, (_, i) => (i + 1).toString());
          console.log('üèîÔ∏è Terre Promise - Nombre de cartes:', this.cardCount);
          break;
        case 'josue_01':
          this.storySteps = [
            'Dieu donne √† Josu√© les instructions pour conqu√©rir J√©richo',
            'Les Isra√©lites marchent silencieusement autour de la ville pendant 6 jours',
            'Le septi√®me jour, ils font 7 tours autour des murailles',
            'Josu√© ordonne au peuple de crier √† la fin du septi√®me tour',
            'Les murailles de J√©richo s\'effondrent par la puissance de Dieu',
            'Le peuple monte dans la ville et la conquiert selon le plan divin',
          ];
          this.shortStorySteps = [
            'Dieu donne √† Josu√© les\ninstructions pour conqu√©rir',
            'Les Isra√©lites marchent\nsilencieusement 6 jours',
            'Le septi√®me jour, ils font\n7 tours autour des murailles',
            'Josu√© ordonne au peuple\nde crier au dernier tour',
            'Les murailles s\'effondrent\npar la puissance de Dieu',
            'Le peuple conquiert la ville\nselon le plan divin',
          ];
          this.cardCount = this.storySteps.length;
          this.correctOrder = Array.from({ length: this.cardCount }, (_, i) => (i + 1).toString());
          console.log('üè∞ J√©richo - Nombre de cartes:', this.cardCount);
          break;
        case 'babel_01':
          this.storySteps = [
            'Tous parlent la m√™me langue',
            'Ils d√©cident de construire une tour',
            'Dieu confond leur langage',
            'Ils se dispersent sur la terre',
          ];
          this.shortStorySteps = [
            'Tous parlent\nla m√™me langue',
            'Ils d√©cident de\nconstruire une tour',
            'Dieu confond\nleur langage',
            'Ils se dispersent\nsur la terre',
          ];
          break;
        case 'abraham_01':
          this.storySteps = [
            'Dieu appelle Abram',
            'Abram quitte son pays',
            'Dieu promet une grande nation',
            'Abraham re√ßoit Isaac',
          ];
          this.shortStorySteps = [
            'Dieu appelle\nAbram',
            'Abram quitte\nson pays',
            'Dieu promet\nune grande nation',
            'Abraham re√ßoit\nIsaac',
          ];
          break;
        case 'isaac_sacrifice_01':
          this.storySteps = [
            'Dieu met Abraham √† l\'√©preuve',
            'Abraham et Isaac partent vers Morija',
            'Isaac demande o√π est l\'agneau',
            'Abraham construit l\'autel',
            'L\'ange arr√™te Abraham',
            'Abraham sacrifie un b√©lier',
            'Dieu renouvelle sa promesse',
          ];
          this.shortStorySteps = [
            'Dieu met Abraham\n√† l\'√©preuve',
            'Voyage vers\nMorija',
            'Isaac demande\no√π est l\'agneau',
            'Abraham construit\nl\'autel',
            'L\'ange arr√™te\nAbraham',
            'Abraham sacrifie\nun b√©lier',
            'Dieu renouvelle\nsa promesse',
          ];
          break;
        case 'isaac_mariage_01':
          this.storySteps = [
            'Abraham envoie son serviteur',
            'Le serviteur va en M√©sopotamie',
            "Rebecca puise de l'eau au puits",
            'Isaac et Rebecca se marient',
          ];
          this.shortStorySteps = [
            'Abraham envoie\nson serviteur',
            'Le serviteur va\nen M√©sopotamie',
            "Rebecca puise\nde l'eau au puits",
            'Isaac et Rebecca\nse marient',
          ];
          break;
        case 'jacob_esau_01':
          this.storySteps = [
            'Naissance des jumeaux Jacob et √âsa√º',
            "√âsa√º vend son droit d'a√Ænesse",
            "Jacob re√ßoit la b√©n√©diction d'Isaac",
            'Jacob doit fuir la col√®re d\'√âsa√º',
            'Jacob revient avec sa famille',
            'Jacob et √âsa√º se r√©concilient',
          ];
          this.shortStorySteps = [
            'Naissance des\njumeaux Jacob et √âsa√º',
            "√âsa√º vend son\ndroit d'a√Ænesse",
            "Jacob re√ßoit la\nb√©n√©diction d'Isaac",
            'Jacob doit fuir\nla col√®re d\'√âsa√º',
            'Jacob revient\navec sa famille',
            'Jacob et √âsa√º\nse r√©concilient',
          ];
          break;
        case 'jacob_songe_01':
          this.storySteps = [
            'Jacob voyage vers Haran',
            'Jacob s\'arr√™te pour dormir',
            'Jacob voit l\'√©chelle dans son songe',
            'Les anges montent et descendent',
            'Dieu parle √† Jacob',
            'Jacob se r√©veille et r√©alise',
            'Jacob √©rige un monument √† B√©thel',
          ];
          this.shortStorySteps = [
            'Jacob voyage\nvers Haran',
            'Jacob s\'arr√™te\npour dormir',
            'Jacob voit l\'√©chelle\ndans son songe',
            'Les anges montent\net descendent',
            'Dieu parle\n√† Jacob',
            'Jacob se r√©veille\net r√©alise',
            'Jacob √©rige un\nmonument √† B√©thel',
          ];
          break;
        case 'joseph_01':
          this.storySteps = [
            'Joseph est aim√© de son p√®re',
            'Ses fr√®res le vendent en √âgypte',
            'Joseph interpr√®te les r√™ves du pharaon',
            'Joseph pardonne √† ses fr√®res',
          ];
          this.shortStorySteps = [
            'Joseph est aim√©\nde son p√®re',
            'Ses fr√®res le\nvendent en √âgypte',
            'Joseph interpr√®te\nles r√™ves du pharaon',
            'Joseph pardonne\n√† ses fr√®res',
          ];
          break;
        case 'commandements_01':
          this.storySteps = [
            'Mo√Øse monte sur le mont Sina√Ø',
            'Dieu parle au milieu du tonnerre et du feu',
            'Dieu donne les dix commandements',
            'Les commandements sont grav√©s sur des tables de pierre',
          ];
          this.shortStorySteps = [
            'Mo√Øse monte sur\nle mont Sina√Ø',
            'Dieu parle au milieu\ndu tonnerre et du feu',
            'Dieu donne les\ndix commandements',
            'Les commandements\nsont grav√©s sur des\ntables de pierre',
          ];
          break;
        case 'salomon_01':
          this.storySteps = [
            'Salomon demande la sagesse √† Dieu pour gouverner le peuple',
            'Dieu exauce sa pri√®re et lui donne une sagesse reconnue dans le monde',
            'Salomon fait construire un magnifique Temple √† J√©rusalem',
            "L'arche de l'alliance est plac√©e dans le Temple et la gloire de Dieu le remplit",
          ];
          this.shortStorySteps = [
            'Salomon demande la sagesse\n√† Dieu pour gouverner\nle peuple',
            'Dieu exauce sa pri√®re et\nlui donne une sagesse\nreconnue dans le monde',
            'Salomon fait construire un\nmagnifique Temple\n√† J√©rusalem',
            "L'arche de l'alliance est\nplac√©e dans le Temple et\nla gloire de Dieu le remplit",
          ];
          console.log(
            'üëë √âtapes Salomon et le Temple d√©finies:',
            this.storySteps
          );
          break;
        case 'elie_01':
          this.storySteps = [
            '√âlie rassemble le peuple sur le mont Carmel pour un d√©fi',
            'Les proph√®tes de Baal crient et dansent toute la journ√©e sans r√©sultat',
            "√âlie arrose le bois d'eau et prie Dieu",
            'Le feu du ciel tombe et consume le sacrifice, et le peuple reconna√Æt Dieu',
          ];
          this.shortStorySteps = [
            '√âlie rassemble le peuple\nsur le mont Carmel\npour un d√©fi',
            'Les proph√®tes de Baal crient\net dansent toute la journ√©e\nsans r√©sultat',
            "√âlie arrose le bois d'eau\net prie Dieu",
            'Le feu du ciel tombe et\nconsume le sacrifice, et le\npeuple reconna√Æt Dieu',
          ];
          console.log(
            'üî• √âtapes √âlie et les proph√®tes de Baal d√©finies:',
            this.storySteps
          );
          break;
        case 'ezechiel_01':
          this.storySteps = [
            "Dieu transporte √âz√©chiel dans une vall√©e d'ossements dess√©ch√©s",
            'Dieu demande √† √âz√©chiel si ces os peuvent revivre',
            '√âz√©chiel proph√©tise et les os se rapprochent, la chair et la peau se forment',
            "L'esprit de Dieu entre en eux et ils deviennent une arm√©e vivante",
          ];
          this.shortStorySteps = [
            "Dieu transporte √âz√©chiel\ndans une vall√©e\nd'ossements dess√©ch√©s",
            'Dieu demande √† √âz√©chiel\nsi ces os peuvent\nrevivre',
            '√âz√©chiel proph√©tise et les os\nse rapprochent, la chair\net la peau se forment',
            "L'esprit de Dieu entre en eux\net ils deviennent une\narm√©e vivante",
          ];
          console.log(
            'üí® √âtapes √âz√©chiel et les ossements dess√©ch√©s d√©finies:',
            this.storySteps
          );
          break;
        case 'naissance_jesus':
          this.storySteps = [
            "L'ange Gabriel annonce √† Marie qu'elle aura un enfant par l'Esprit Saint",
            'Marie accepte la volont√© de Dieu avec foi',
            "Joseph prend Marie chez lui apr√®s que l'ange lui soit apparu en r√™ve",
            'Marie et Joseph vont √† Bethl√©hem pour le recensement de C√©sar',
            "J√©sus na√Æt dans une √©table faute de place √† l'auberge",
            "Des bergers re√ßoivent l'annonce de la naissance par un ange",
            "Une √©toile guide des mages d'Orient vers J√©sus",
          ];
          this.shortStorySteps = [
            "L'ange Gabriel annonce\n√† Marie qu'elle aura\nun enfant par l'Esprit Saint",
            'Marie accepte la volont√©\nde Dieu avec foi',
            "Joseph prend Marie chez lui\napr√®s que l'ange lui soit\napparu en r√™ve",
            'Marie et Joseph vont\n√† Bethl√©hem pour le\nrecensement de C√©sar',
            "J√©sus na√Æt dans une √©table\nfaute de place √†\nl'auberge",
            "Des bergers re√ßoivent\nl'annonce de la naissance\npar un ange",
            "Une √©toile guide des mages\nd'Orient vers J√©sus",
          ];
          console.log(
            'üë∂ √âtapes Naissance de J√©sus d√©finies:',
            this.storySteps
          );
          break;

        case 'enfance_jesus':
          this.storySteps = [
            'Marie et Joseph vont √† J√©rusalem pour la f√™te de la P√¢que avec J√©sus',
            'Apr√®s la f√™te, ils repartent mais J√©sus reste √† J√©rusalem',
            "Ils pensent qu'il est avec d'autres voyageurs et font une journ√©e de chemin",
            'Ils le cherchent parmi leurs parents et connaissances sans le trouver',
            'Ils retournent √† J√©rusalem pour le chercher',
            'Au bout de trois jours, ils le trouvent dans le temple',
            'J√©sus √©coute les docteurs et pose des questions, √©tonnant tous par son intelligence',
            "J√©sus r√©pond qu'il faut qu'il s'occupe des affaires de son P√®re",
          ];
          this.shortStorySteps = [
            'Marie et Joseph vont\n√† J√©rusalem pour la f√™te\nde la P√¢que avec J√©sus',
            'Apr√®s la f√™te, ils repartent\nmais J√©sus reste\n√† J√©rusalem',
            "Ils pensent qu'il est avec\nd'autres voyageurs et font\nune journ√©e de chemin",
            'Ils le cherchent parmi leurs\nparents et connaissances\nsans le trouver',
            'Ils retournent √† J√©rusalem\npour le chercher',
            'Au bout de trois jours,\nils le trouvent dans\nle temple',
            'J√©sus √©coute les docteurs\net pose des questions,\n√©tonnant tous par son intelligence',
            "J√©sus r√©pond qu'il faut\nqu'il s'occupe des affaires\nde son P√®re",
          ];
          console.log(
            "üßí √âtapes L'enfance de J√©sus d√©finies:",
            this.storySteps
          );
          break;

        case 'bapteme_jesus':
          this.storySteps = [
            'Jean-Baptiste pr√™che dans le d√©sert, appelant √† la repentance',
            'J√©sus vient de Galil√©e pour √™tre baptis√© par Jean',
            "Jean h√©site, disant qu'il a besoin d'√™tre baptis√© par J√©sus",
            "J√©sus insiste, expliquant que c'est n√©cessaire pour accomplir toute la justice",
            "J√©sus est baptis√© par Jean dans l'eau",
            "Lorsque J√©sus sort de l'eau, les cieux s'ouvrent",
            "L'Esprit de Dieu descend sur lui comme une colombe",
            'Une voix du ciel dit : ¬´ Celui-ci est mon Fils bien-aim√© ¬ª',
          ];
          this.shortStorySteps = [
            'Jean-Baptiste pr√™che\ndans le d√©sert, appelant\n√† la repentance',
            'J√©sus vient de Galil√©e\npour √™tre baptis√©\npar Jean',
            "Jean h√©site, disant qu'il a\nbesoin d'√™tre baptis√©\npar J√©sus",
            "J√©sus insiste, expliquant\nque c'est n√©cessaire pour\naccomplir toute la justice",
            "J√©sus est baptis√© par Jean\ndans l'eau",
            "Lorsque J√©sus sort de l'eau,\nles cieux s'ouvrent",
            "L'Esprit de Dieu descend\nsur lui comme une colombe",
            'Une voix du ciel dit :\n¬´ Celui-ci est mon Fils bien-aim√© ¬ª',
          ];
          console.log(
            'üí¶ √âtapes Le bapt√™me de J√©sus d√©finies:',
            this.storySteps
          );
          break;

        case 'tentations_jesus':
          this.storySteps = [
            "Apr√®s son bapt√™me, J√©sus est conduit par l'Esprit dans le d√©sert",
            'J√©sus je√ªne quarante jours et quarante nuits, apr√®s quoi il a faim',
            "Le diable s'approche et lui dit : ¬´ Si tu es Fils de Dieu, ordonne que ces pierres deviennent des pains ¬ª",
            "J√©sus r√©pond : ¬´ L'homme ne vivra pas de pain seulement, mais de toute parole qui sort de la bouche de Dieu ¬ª",
            'Le diable transporte J√©sus sur le haut du temple et le tente de se jeter en bas',
            'J√©sus r√©pond : ¬´ Tu ne tenteras point le Seigneur, ton Dieu ¬ª',
            'Le diable montre √† J√©sus tous les royaumes du monde et leur gloire',
            'J√©sus r√©pond : ¬´ Retire-toi, Satan ! Tu adoreras le Seigneur, ton Dieu, et tu le serviras lui seul ¬ª',
            'Le diable laisse J√©sus, et des anges viennent le servir',
          ];
          this.shortStorySteps = [
            "Apr√®s son bapt√™me, J√©sus est\nconduit par l'Esprit\ndans le d√©sert",
            'J√©sus je√ªne quarante jours\net quarante nuits,\napr√®s quoi il a faim',
            "Le diable s'approche et lui dit :\n¬´ Si tu es Fils de Dieu,\nordonne que ces pierres deviennent des pains ¬ª",
            "J√©sus r√©pond : ¬´ L'homme ne vivra pas\nde pain seulement, mais de toute\nparole qui sort de la bouche de Dieu ¬ª",
            'Le diable transporte J√©sus\nsur le haut du temple\net le tente de se jeter en bas',
            'J√©sus r√©pond : ¬´ Tu ne tenteras point\nle Seigneur, ton Dieu ¬ª',
            'Le diable montre √† J√©sus\ntous les royaumes du monde\net leur gloire',
            'J√©sus r√©pond : ¬´ Retire-toi, Satan !\nTu adoreras le Seigneur, ton Dieu,\net tu le serviras lui seul ¬ª',
            'Le diable laisse J√©sus,\net des anges viennent le servir',
          ];
          console.log(
            'üòà √âtapes Les tentations de J√©sus d√©finies:',
            this.storySteps
          );
          break;
        default:
          // Utiliser les √©tapes Jonas par d√©faut
          this.storySteps = [
            'Dieu parle √† Jonas',
            'Jonas fuit en bateau',
            'Dans le ventre du poisson',
            'Jonas ob√©it et pr√™che',
          ];
          this.shortStorySteps = [
            'Dieu parle\n√† Jonas',
            'Jonas fuit\nen bateau',
            'Dans le ventre\ndu poisson',
            'Jonas ob√©it\net pr√™che',
          ];
          break;
      }

      // Mettre √† jour les cartes si elles existent d√©j√†
      if (this.cards && this.cards.length > 0) {
        this.updateCardsAfterLessonDataChange();
      }
    }
  }

  private updateCardsAfterLessonDataChange() {
    // Mettre √† jour le texte de chaque carte selon les nouvelles donn√©es
    this.cards.forEach((card, index) => {
      const frontNumber = (card as any).frontNumber;
      if (frontNumber && this.shortStorySteps[index]) {
        frontNumber.setText(this.shortStorySteps[index]);
      }
    });
  }

  preload() {
    // Cr√©er des textures color√©es au lieu de charger des images
    this.createColorTextures();
  }

  private createColorTextures() {
    const graphics = this.add.graphics();
    const { width } = this.scale;

    // Calculer les tailles responsive
    const isMobile = width < 500;
    const isTablet = width >= 500 && width < 800;
    const cardWidth = isMobile ? 80 : isTablet ? 100 : 120;
    const cardHeight = isMobile ? 100 : isTablet ? 130 : 160;

    // Cr√©er 6 cartes avec des gradients modernes (pour tous les niveaux de difficult√©)
    const gradientColors = [
      { from: 0x3b82f6, to: 0x1d4ed8 }, // Bleu gradient
      { from: 0x10b981, to: 0x047857 }, // Vert gradient
      { from: 0xf59e0b, to: 0xd97706 }, // Orange gradient
      { from: 0xef4444, to: 0xdc2626 }, // Rouge gradient
      { from: 0x8b5cf6, to: 0x7c3aed }, // Violet gradient
      { from: 0x06b6d4, to: 0x0891b2 }, // Cyan gradient
    ];

    for (let i = 1; i <= 6; i++) {
      graphics.clear();

      // Cr√©er un gradient radial pour un effet moderne
      const color = gradientColors[i - 1];
      graphics.fillGradientStyle(
        color.from,
        color.from,
        color.to,
        color.to,
        1,
        1,
        0.5,
        0.5
      );
      graphics.fillRoundedRect(0, 0, cardWidth, cardHeight, 15);

      // Ajouter une bordure blanche avec ombre
      graphics.lineStyle(4, 0xffffff, 1);
      graphics.strokeRoundedRect(0, 0, cardWidth, cardHeight, 15);

      // Ajouter une ombre port√©e
      graphics.fillStyle(0x000000, 0.2);
      graphics.fillRoundedRect(2, 2, cardWidth, cardHeight, 15);

      graphics.generateTexture(`card${i}`, cardWidth, cardHeight);
    }

    // Cr√©er texture de background avec gradient subtil
    graphics.clear();
    graphics.fillGradientStyle(
      0xf8fafc,
      0xf8fafc,
      0xe2e8f0,
      0xe2e8f0,
      1,
      1,
      0,
      0
    );
    graphics.fillRect(0, 0, 800, 600);
    graphics.generateTexture('bg', 800, 600);

    graphics.destroy();
  }

  create() {
    // (d√©clarations remplac√©es plus bas)
    const { width, height } = this.scale;
    const isMobile = width < 600;
    
    // Adaptive sizing based on number of cards
    let slotWidth, slotHeight, cardWidth, cardHeight, margin, cardsPerRow, slotsPerRow;
    
    if (this.cardCount > 20) {
      // For large number of cards (20+)
      slotWidth = isMobile ? 60 : 90;
      slotHeight = isMobile ? 50 : 70;
      cardsPerRow = isMobile ? 5 : 8;
      slotsPerRow = isMobile ? 5 : 8;
      margin = isMobile ? 8 : 15;
    } else if (this.cardCount > 10) {
      // For medium number of cards (10-20)
      slotWidth = isMobile ? 70 : 100;
      slotHeight = isMobile ? 60 : 90;
      cardsPerRow = isMobile ? 4 : 6;
      slotsPerRow = isMobile ? 4 : 6;
      margin = isMobile ? 8 : 15;
    } else {
      // For small number of cards (1-10)
      slotWidth = isMobile ? 80 : 110;
      slotHeight = isMobile ? 70 : 100;
      cardsPerRow = isMobile ? 4 : 6;
      slotsPerRow = isMobile ? 4 : 6;
      margin = isMobile ? 10 : 20;
    }
    
    cardWidth = slotWidth;
    cardHeight = slotHeight;
    
    // Fond moderne avec gradient
    const bg = this.add.graphics();
    bg.fillGradientStyle(0xf8fafc, 0xf8fafc, 0xe2e8f0, 0xe2e8f0, 1, 1, 1, 1);
    bg.fillRoundedRect(0, 0, width, height, 30);
    
    // Ajouter des √©l√©ments d√©coratifs subtils
    const decorGraphics = this.add.graphics();
    decorGraphics.setAlpha(0.1);
    
    // Motifs g√©om√©triques subtils
    for (let i = 0; i < 5; i++) {
      const x = (width / 6) * (i + 1);
      const y = height * 0.15;
      decorGraphics.fillStyle(0x3b82f6, 0.3);
      decorGraphics.fillCircle(x, y, 4);
    }
    
    // Titre avec style am√©lior√©
    const titleY = 25;
    const instructionsY = titleY + (isMobile ? 35 : 45);
    // Espace dynamique apr√®s instructions (plus il y a d'√©tapes, plus on espace)
    const minSpace = isMobile ? 50 : 70;
    const extraSpace =
      Math.max(0, this.cardCount - (isMobile ? 4 : 6)) * (isMobile ? 8 : 12);
    const slotsStartY = instructionsY + minSpace + extraSpace;
    
    // Titre principal avec ombre et gradient
    const titleText = this.add
      .text(width / 2, titleY, "Remets les sc√®nes dans l'ordre chronologique", {
        fontSize: isMobile ? '20px' : '28px',
        color: '#1e293b',
        fontFamily: 'Inter, system-ui, sans-serif',
        fontStyle: 'bold',
        stroke: '#fff',
        strokeThickness: 3,
        shadow: {
          offsetX: 2,
          offsetY: 2,
          color: '#94a3b8',
          blur: 4,
          fill: true,
        },
      })
      .setOrigin(0.5);
    
    // Instructions avec style moderne
    this.add
      .text(
        width / 2,
        instructionsY,
        "üìö Glisse les cartes dans les zones pour reconstituer l'histoire",
        {
          fontSize: isMobile ? '13px' : '16px',
          color: '#475569',
          fontFamily: 'Inter, system-ui, sans-serif',
          fontStyle: '500',
          shadow: {
            offsetX: 1,
            offsetY: 1,
            color: '#cbd5e1',
            blur: 2,
            fill: true,
          },
        }
      )
      .setOrigin(0.5);
    // Calcul slots sur plusieurs lignes si besoin
    const slotRows = Math.ceil(this.cardCount / slotsPerRow);
    const slotIndices = Array.from({ length: this.cardCount }, (_, i) => i);
    this.slots = slotIndices.map((i) => {
      const row = Math.floor(i / slotsPerRow);
      const col = i % slotsPerRow;
      const slotsInThisRow =
        row === slotRows - 1 ? this.cardCount - row * slotsPerRow : slotsPerRow;
      const totalRowWidth =
        slotsInThisRow * slotWidth + (slotsInThisRow - 1) * margin;
      const x =
        width / 2 -
        totalRowWidth / 2 +
        col * (slotWidth + margin) +
        slotWidth / 2;
      const y = slotsStartY + row * (slotHeight + 36);
      const zone = this.add
        .zone(x, y, slotWidth, slotHeight)
        .setRectangleDropZone(slotWidth, slotHeight);
      (zone as any).index = i;
      // Slot background moderne avec gradient et ombre
      const slotBg = this.add.graphics();
      
      // Ombre port√©e
      slotBg.fillStyle(0x1e293b, 0.15);
      slotBg.fillRoundedRect(
        x - slotWidth / 2 + 2,
        y - slotHeight / 2 + 2,
        slotWidth,
        slotHeight,
        18
      );
      
      // Fond principal avec gradient
      slotBg.fillGradientStyle(0xffffff, 0xffffff, 0xf1f5f9, 0xf1f5f9, 1, 1, 1, 1);
      slotBg.fillRoundedRect(
        x - slotWidth / 2,
        y - slotHeight / 2,
        slotWidth,
        slotHeight,
        18
      );
      
      // Bordure avec gradient
      slotBg.lineStyle(2, 0x94a3b8, 0.6);
      slotBg.strokeRoundedRect(
        x - slotWidth / 2,
        y - slotHeight / 2,
        slotWidth,
        slotHeight,
        18
      );
      
      // Bordure interne subtile
      slotBg.lineStyle(1, 0xffffff, 0.8);
      slotBg.strokeRoundedRect(
        x - slotWidth / 2 + 1,
        y - slotHeight / 2 + 1,
        slotWidth - 2,
        slotHeight - 2,
        17
      );
      
      // Indicateur de position
      const stepNumber = this.add
        .text(x, y - slotHeight / 2 + 15, `${i + 1}`, {
          fontSize: isMobile ? '12px' : '14px',
          color: '#94a3b8',
          fontFamily: 'Inter, system-ui, sans-serif',
          fontStyle: 'bold',
        })
        .setOrigin(0.5);
      
      slotBg.setAlpha(0.95);
      // (Suppression du num√©ro d'√©tape pour un affichage plus √©pur√©)
      return zone;
    });
    // Cartes sur plusieurs lignes si besoin
    const cardRows = Math.ceil(this.cardCount / cardsPerRow);
    const cardsStartY = slotsStartY + slotRows * (slotHeight + 36) + 20;
    const cardKeys = Array.from(
      { length: this.cardCount },
      (_, i) => `card${i + 1}`
    );
    const shuffledKeys = [...cardKeys].sort(() => Math.random() - 0.5);
    this.cards = shuffledKeys.map((key, i) => {
      const row = Math.floor(i / cardsPerRow);
      const col = i % cardsPerRow;
      const cardsInThisRow =
        row === cardRows - 1 ? this.cardCount - row * cardsPerRow : cardsPerRow;
      const totalRowWidth =
        cardsInThisRow * cardWidth + (cardsInThisRow - 1) * margin;
      const x =
        width / 2 -
        totalRowWidth / 2 +
        col * (cardWidth + margin) +
        cardWidth / 2;
      const y = cardsStartY + row * (cardHeight + 28);
      const container = this.add.container(x, y) as CardContainer;
      const cardIndex = parseInt(key.replace('card', '')) - 1;
      // Card background moderne avec gradient et ombre
      const cardGraphics = this.add.graphics();
      
      // Ombre port√©e √©l√©gante
      cardGraphics.fillStyle(0x1e293b, 0.2);
      cardGraphics.fillRoundedRect(
        -cardWidth / 2 + 3,
        -cardHeight / 2 + 3,
        cardWidth,
        cardHeight,
        22
      );
      
      // Couleurs gradient selon l'index de la carte
      const gradientColors = [
        { top: 0x3b82f6, bottom: 0x1d4ed8 },  // Bleu
        { top: 0x10b981, bottom: 0x059669 },  // Vert
        { top: 0xf59e0b, bottom: 0xd97706 },  // Orange
        { top: 0xef4444, bottom: 0xdc2626 },  // Rouge
      ];
      const colorSet = gradientColors[cardIndex % gradientColors.length];
      
      // Fond principal avec gradient
      cardGraphics.fillGradientStyle(
        colorSet.top, colorSet.top, 
        colorSet.bottom, colorSet.bottom, 
        1, 1, 1, 1
      );
      cardGraphics.fillRoundedRect(
        -cardWidth / 2,
        -cardHeight / 2,
        cardWidth,
        cardHeight,
        22
      );
      
      // Bordure brillante
      cardGraphics.lineStyle(2, 0xffffff, 0.9);
      cardGraphics.strokeRoundedRect(
        -cardWidth / 2,
        -cardHeight / 2,
        cardWidth,
        cardHeight,
        22
      );
      
      // Reflet subtil sur le haut
      cardGraphics.fillStyle(0xffffff, 0.15);
      cardGraphics.fillRoundedRect(
        -cardWidth / 2 + 2,
        -cardHeight / 2 + 2,
        cardWidth - 4,
        cardHeight / 3,
        20
      );
      
      container.add(cardGraphics);
      // Card text
      // Afficher uniquement le texte de l'√©tape (shortStorySteps), sinon rien
      const displayText = this.shortStorySteps[cardIndex] || '';
      
      // Adaptive text size based on number of cards
      let fontSize;
      if (this.cardCount > 20) {
        fontSize = isMobile ? '8px' : '10px';
      } else if (this.cardCount > 10) {
        fontSize = isMobile ? '9px' : '12px';
      } else {
        fontSize = isMobile ? '11px' : '15px';
      }
      
      const frontNumber = this.add
        .text(0, 0, displayText, {
          fontSize: fontSize,
          color: '#ffffff',
          fontFamily: 'Inter, system-ui, sans-serif',
          fontStyle: 'bold',
          align: 'center',
          wordWrap: { width: cardWidth - 12 },
          stroke: '#1e293b',
          strokeThickness: 2,
          shadow: {
            offsetX: 2,
            offsetY: 2,
            color: '#000000',
            blur: 4,
            fill: true,
          },
        })
        .setOrigin(0.5);
      container.add(frontNumber);
      (container as any).frontNumber = frontNumber;
      container.setSize(cardWidth, cardHeight);
      container.setInteractive({ draggable: true, useHandCursor: true });
      this.input.setDraggable(container);
      
      // Effets de survol et d'interaction
      container.on('pointerover', () => {
        this.tweens.add({
          targets: container,
          scaleX: 1.05,
          scaleY: 1.05,
          duration: 200,
          ease: 'Power2',
        });
        container.setDepth(10);
      });
      
      container.on('pointerout', () => {
        this.tweens.add({
          targets: container,
          scaleX: 1,
          scaleY: 1,
          duration: 200,
          ease: 'Power2',
        });
        container.setDepth(1);
      });
      
      container.on('dragstart', () => {
        this.tweens.add({
          targets: container,
          scaleX: 1.1,
          scaleY: 1.1,
          duration: 150,
          ease: 'Back.easeOut',
        });
        container.setAlpha(0.8);
        container.setDepth(20);
      });
      
      container.on('dragend', () => {
        this.tweens.add({
          targets: container,
          scaleX: 1,
          scaleY: 1,
          duration: 200,
          ease: 'Back.easeOut',
        });
        container.setAlpha(1);
        container.setDepth(1);
      });
      
      // Double-clic : ramener la carte √† la ligne du bas
      container.setData('originalX', x);
      container.setData('originalY', y);
      container.setData('lastClick', 0);
      container.on('pointerdown', () => {
        const now = this.time.now;
        const lastClick = container.getData('lastClick') || 0;
        if (now - lastClick < 350) {
          (container as any).slotIndex = undefined;
          this.tweens.add({
            targets: container,
            x: container.getData('originalX'),
            y: container.getData('originalY'),
            duration: 300,
            ease: 'Back.easeOut',
          });
        }
        container.setData('lastClick', now);
      });
      return container;
    });
    this.input.on(
      'drop',
      (_pointer: any, gameObject: CardContainer, dropZone: any) => {
        // V√©rifier si une autre carte occupe d√©j√† cette zone
        const occupant = this.cards.find(
          (card) => card.slotIndex === dropZone.index && card !== gameObject
        );
        if (occupant) {
          // √âchanger les positions avec animation
          const tempX = gameObject.x;
          const tempY = gameObject.y;
          const tempSlot = gameObject.slotIndex;

          // Animation d'√©change
          this.tweens.add({
            targets: gameObject,
            x: dropZone.x,
            y: dropZone.y,
            duration: 300,
            ease: 'Back.easeOut',
          });

          this.tweens.add({
            targets: occupant,
            x: tempX,
            y: tempY,
            duration: 300,
            ease: 'Back.easeOut',
          });

          gameObject.slotIndex = dropZone.index;
          occupant.slotIndex = tempSlot;
        } else {
          // Animation de placement
          this.tweens.add({
            targets: gameObject,
            x: dropZone.x,
            y: dropZone.y,
            duration: 300,
            ease: 'Back.easeOut',
          });
          gameObject.slotIndex = dropZone.index;
        }

        // Effet de succ√®s visuel
        this.tweens.add({
          targets: gameObject,
          scaleX: 1.05,
          scaleY: 1.05,
          duration: 150,
          yoyo: true,
          ease: 'Power2',
        });

        // V√©rifier si toutes les cartes sont plac√©es pour activer le bouton
        this.updateValidateButton();
      }
    );

    this.input.on(
      'dragenter',
      (_pointer: any, _gameObject: any, dropZone: any) => {
        // Effet visuel am√©lior√© pour la zone de drop
        this.tweens.add({
          targets: dropZone,
          alpha: 0.7,
          scaleX: 1.05,
          scaleY: 1.05,
          duration: 200,
          ease: 'Power2',
        });
      }
    );

    this.input.on(
      'dragleave',
      (_pointer: any, _gameObject: any, dropZone: any) => {
        // Restaurer l'√©tat normal de la zone
        this.tweens.add({
          targets: dropZone,
          alpha: 1,
          scaleX: 1,
          scaleY: 1,
          duration: 200,
          ease: 'Power2',
        });
      }
    );

    // (Instructions sous les slots supprim√©es)

    // Cr√©er le bouton de validation avec d√©lai
    this.time.delayedCall(1500, () => {
      this.createValidateButton();
    });
  }

  private createValidateButton() {
    const { width, height } = this.scale;

    // Cr√©er le bouton de validation avec design moderne
    this.validateButton = this.add.container(width / 2, height - 60);
    this.validateButton.setAlpha(0); // Commencer invisible

    // Fond du bouton moderne avec gradient et effets
    const buttonBg = this.add.graphics();
    
    // Ombre port√©e √©l√©gante
    buttonBg.fillStyle(0x1e293b, 0.3);
    buttonBg.fillRoundedRect(-102, -27, 204, 54, 30);
    
    // Gradient principal du bouton
    buttonBg.fillGradientStyle(
      0x10b981,
      0x10b981,
      0x059669,
      0x059669,
      1,
      1,
      0,
      0
    );
    buttonBg.fillRoundedRect(-100, -25, 200, 50, 28);
    
    // Bordure brillante
    buttonBg.lineStyle(2, 0xffffff, 0.8);
    buttonBg.strokeRoundedRect(-100, -25, 200, 50, 28);
    
    // Reflet sur le haut du bouton
    buttonBg.fillStyle(0xffffff, 0.2);
    buttonBg.fillRoundedRect(-96, -21, 192, 15, 25);

    // Texte du bouton moderne
    const buttonText = this.add
      .text(0, 0, '‚úÖ Valider mon ordre', {
        fontSize: '18px',
        color: '#ffffff',
        fontFamily: 'Inter, system-ui, sans-serif',
        fontStyle: 'bold',
        stroke: '#065f46',
        strokeThickness: 2,
        shadow: {
          offsetX: 2,
          offsetY: 2,
          color: '#000000',
          blur: 4,
          fill: true,
        },
      })
      .setOrigin(0.5);

    this.validateButton.add([buttonBg, buttonText]);
    this.validateButton.setSize(200, 50);
    this.validateButton.setInteractive({ useHandCursor: true });

    // Animation d'entr√©e du bouton
    this.tweens.add({
      targets: this.validateButton,
      alpha: 1,
      y: height - 60,
      scaleX: 1,
      scaleY: 1,
      duration: 600,
      ease: 'Back.easeOut',
    });

    // √âv√©nement de clic avec animation
    this.validateButton.on('pointerdown', () => {
      // Animation de clic
      this.tweens.add({
        targets: this.validateButton,
        scaleX: 0.95,
        scaleY: 0.95,
        duration: 100,
        yoyo: true,
        ease: 'Power2',
        onComplete: () => {
          this.checkWin();
        },
      });
    });

    // Effet hover am√©lior√©
    this.validateButton.on('pointerover', () => {
      this.tweens.add({
        targets: this.validateButton,
        scaleX: 1.08,
        scaleY: 1.08,
        duration: 200,
        ease: 'Back.easeOut',
      });
    });

    this.validateButton.on('pointerout', () => {
      this.tweens.add({
        targets: this.validateButton,
        scaleX: 1,
        scaleY: 1,
        duration: 200,
        ease: 'Back.easeOut',
      });
    });

    // D√©sactiver le bouton initialement
    this.updateValidateButton();
  }

  private updateValidateButton() {
    if (!this.validateButton) return;

    // V√©rifier si toutes les cartes sont plac√©es
    const placedCards = this.cards.filter(
      (card) => card.slotIndex !== undefined
    );
    const allPlaced = placedCards.length === this.cardCount;

    if (allPlaced) {
      // Activer le bouton avec animation
      this.tweens.add({
        targets: this.validateButton,
        alpha: 1,
        scaleX: 1.05,
        scaleY: 1.05,
        duration: 300,
        ease: 'Back.easeOut',
        yoyo: true,
      });

      this.validateButton.setInteractive({ useHandCursor: true });

      // Changer la couleur pour indiquer qu'il est pr√™t
      const buttonBg = this.validateButton
        .list[0] as Phaser.GameObjects.Graphics;
      buttonBg.clear();
      buttonBg.fillGradientStyle(
        0x10b981,
        0x10b981,
        0x059669,
        0x059669,
        1,
        1,
        0,
        0
      );
      buttonBg.fillRoundedRect(-100, -25, 200, 50, 25);
      buttonBg.lineStyle(3, 0xffffff, 1);
      buttonBg.strokeRoundedRect(-100, -25, 200, 50, 25);

      // Effet de pulsation pour attirer l'attention
      this.tweens.add({
        targets: this.validateButton,
        scaleX: 1.02,
        scaleY: 1.02,
        duration: 1000,
        yoyo: true,
        repeat: -1,
        ease: 'Sine.easeInOut',
      });
    } else {
      // D√©sactiver le bouton
      this.tweens.add({
        targets: this.validateButton,
        alpha: 0.6,
        duration: 200,
        ease: 'Power2',
      });

      this.validateButton.disableInteractive();

      // Changer la couleur pour indiquer qu'il n'est pas pr√™t
      const buttonBg = this.validateButton
        .list[0] as Phaser.GameObjects.Graphics;
      buttonBg.clear();
      buttonBg.fillGradientStyle(
        0x6b7280,
        0x6b7280,
        0x4b5563,
        0x4b5563,
        1,
        1,
        0,
        0
      );
      buttonBg.fillRoundedRect(-100, -25, 200, 50, 25);
      buttonBg.lineStyle(3, 0x9ca3af, 1);
      buttonBg.strokeRoundedRect(-100, -25, 200, 50, 25);
    }
  }

  private checkWin() {
    if (this.gameComplete) return;

    // V√©rifier que toutes les cartes sont plac√©es
    const placedCards = this.cards.filter(
      (card) => card.slotIndex !== undefined
    );
    if (placedCards.length !== this.cardCount) return;

    // D√©sactiver le bouton de validation
    if (this.validateButton) {
      this.validateButton.disableInteractive();
      this.validateButton.setAlpha(0.5);
    }

    // Trier par index de slot et v√©rifier l'ordre
    const sortedCards = placedCards.sort((a, b) => a.slotIndex! - b.slotIndex!);
    const order = sortedCards.map((card) => {
      // R√©cup√©rer le texte de la carte depuis le frontNumber
      const frontNumber = (card as any).frontNumber;
      return frontNumber?.text || '';
    });

    // V√©rifier si l'ordre correspond aux √©tapes chronologiques
    const correctStoryOrder = this.shortStorySteps.slice(0, this.cardCount);
    // Normaliser les textes pour ignorer les diff√©rences de \n
    const normalizedOrder = order.map((text) =>
      text.replace(/\n/g, ' ').trim()
    );
    const normalizedCorrect = correctStoryOrder.map((text) =>
      text.replace(/\n/g, ' ').trim()
    );
    const isCorrect = normalizedOrder.every(
      (cardText, index) => cardText === normalizedCorrect[index]
    );

    // Debug temporaire pour voir le probl√®me
    console.log('üéØ V√©rification ordre:', {
      'Ordre actuel brut': order,
      'Ordre correct brut': correctStoryOrder,
      'Ordre normalis√©': normalizedOrder,
      'Correct normalis√©': normalizedCorrect,
      'Est correct': isCorrect,
    });

    // Afficher le message avec design moderne
    const { width } = this.scale;
    let successMessage = 'Bravo ! Jonas a ob√©i √† Dieu.';
    let badgeName = 'Ami des Proph√®tes';

    // Adapter le message selon la le√ßon
    if (this.lessonData && isCorrect) {
      const lessonId = this.lessonData.id || '';
      if (lessonId.startsWith('adam_eve')) {
        successMessage = "Bravo ! Tu as compris l'histoire d'Adam et √àve.";
        badgeName = 'Gardien du Jardin';
      } else if (lessonId.startsWith('cain_abel')) {
        successMessage =
          "Bravo ! Tu as reconstitu√© l'histoire de Ca√Øn et Abel.";
        badgeName = 'Gardien de mon fr√®re';
      } else if (lessonId === 'creation_01') {
        successMessage = 'Bravo ! Tu as retrac√© les 7 jours de la Cr√©ation !';
        badgeName = 'T√©moin de la Cr√©ation';
      } else
        switch (lessonId) {
          case 'creation_world':
            successMessage = 'Bravo ! Tu as retrac√© la cr√©ation du monde.';
            badgeName = 'T√©moin de la Cr√©ation';
            break;
          case 'jonas_02_fuite':
            successMessage = 'Bravo ! Tu as reconstitu√© la fuite de Jonas.';
            badgeName = 'Navigateur sage';
            break;
          case 'jonas_03_ninive':
            successMessage = "Bravo ! Ninive s'est convertie gr√¢ce √† toi.";
            badgeName = 'Messager de paix';
            break;
          case 'jonas_04_ricin':
            successMessage = 'Bravo ! Tu as compris la le√ßon du ricin.';
            badgeName = 'C≈ìur mis√©ricordieux';
            break;
          case 'daniel_01':
            successMessage = 'Bravo ! Daniel est rest√© fid√®le √† Dieu.';
            badgeName = 'Fid√®le comme Daniel';
            break;
          case 'david_01':
            successMessage = 'Bravo ! David a vaincu le g√©ant avec la foi.';
            badgeName = 'Courage de David';
            break;
          case 'creation_01':
            successMessage = 'Bravo ! Tu as retrac√© la cr√©ation du monde.';
            badgeName = 'T√©moin de la Cr√©ation';
            break;
          case 'josue_01':
            successMessage = 'Bravo ! Les murailles sont tomb√©es par la foi.';
            badgeName = 'Conqu√©rant fid√®le';
            break;
          case 'adam_eve_01':
            successMessage = "Bravo ! Tu as compris l'histoire d'Adam et √àve.";
            badgeName = 'Gardien du Jardin';
            break;
          case 'moise_01':
            successMessage = "Bravo ! Tu as retrac√© l'Exode d'Isra√´l.";
            badgeName = "Lib√©rateur d'Isra√´l";
            break;
          case 'noe_01':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire de No√© et l'arche.";
            badgeName = "Navigateur de l'Alliance";
            break;
          case 'babel_01':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire de la Tour de Babel.";
            badgeName = 'Ma√Ætre des Langues';
            break;
          case 'abraham_01':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire d'Abraham et de l'alliance.";
            badgeName = "Fils d'Abraham";
            break;
          case 'isaac_sacrifice_01':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire du sacrifice d'Isaac.";
            badgeName = 'T√©moin de la Foi';
            break;
          case 'isaac_mariage_01':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire d'Isaac et Rebecca.";
            badgeName = 'H√©ritier de la Promesse';
            break;
          case 'jacob_esau_01':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire de Jacob et √âsa√º.";
            badgeName = 'Ma√Ætre de la R√©conciliation';
            break;
          case 'jacob_songe_01':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire du songe de Jacob.";
            badgeName = 'T√©moin de l\'√âchelle';
            break;
          case 'joseph_01':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire de Joseph en √âgypte.";
            badgeName = 'Ma√Ætre du Pardon';
            break;
          case 'commandements_01':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire des Dix Commandements.";
            badgeName = 'Gardien de la Loi';
            break;
          case 'gedeon_01':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire de G√©d√©on et des 300 hommes.";
            badgeName = 'Vaillant H√©ros';
            break;
          case 'moise_buisson_01':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire de l'appel de Mo√Øse.";
            badgeName = "T√©moin de l'Appel";
            break;
          case 'plaies_egypte_01':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire des dix plaies d'√âgypte.";
            badgeName = 'T√©moin de la Puissance';
            break;
          case 'mer_rouge_01':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire de la travers√©e de la mer Rouge.";
            badgeName = 'T√©moin du Miracle';
            break;
          case 'samson_01':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire de Samson et Dalila.";
            badgeName = 'T√©moin de la Force';
            break;
          case 'salomon_01':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire de Salomon et le Temple.";
            badgeName = 'T√©moin de la Sagesse';
            break;
          case 'elie_01':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire d'√âlie et les proph√®tes de Baal.";
            badgeName = 'T√©moin du Feu';
            break;
          case 'ezechiel_01':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire d'√âz√©chiel et les ossements dess√©ch√©s.";
            badgeName = 'T√©moin de la R√©surrection';
            break;
          case 'naissance_jesus':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire de la naissance de J√©sus.";
            badgeName = 'T√©moin de No√´l';
            break;

          case 'enfance_jesus':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire de l'enfance de J√©sus au temple.";
            badgeName = '√âtudiant du Temple';
            break;

          case 'bapteme_jesus':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire du bapt√™me de J√©sus.";
            badgeName = 'T√©moin du Bapt√™me';
            break;

          case 'tentations_jesus':
            successMessage =
              "Bravo ! Tu as reconstitu√© l'histoire des tentations de J√©sus.";
            badgeName = 'Vainqueur des Tentations';
            break;
          default:
            // Garder le message par d√©faut
            break;
        }
    }

    const message = isCorrect
      ? successMessage
      : "Regarde bien l'histoire, essaie encore.";

    const messageColor = isCorrect ? '#10b981' : '#ef4444';
    const bgColor = isCorrect ? 0x10b981 : 0xef4444;

    // Cr√©er un fond pour le message
    const messageBg = this.add.graphics();
    messageBg.fillStyle(bgColor, 0.1);
    messageBg.fillRoundedRect(width / 2 - 200, 100, 400, 80, 20);
    messageBg.lineStyle(3, parseInt(messageColor.replace('#', ''), 16), 1);
    messageBg.strokeRoundedRect(width / 2 - 200, 100, 400, 80, 20);

    const messageText = this.add
      .text(width / 2, 90, message, {
        fontSize: '24px',
        color: messageColor,
        fontFamily: 'Arial, sans-serif',
        fontStyle: 'bold',
        stroke: '#ffffff',
        strokeThickness: 2,
        shadow: {
          offsetX: 2,
          offsetY: 2,
          color: '#000000',
          blur: 4,
          fill: true,
        },
      })
      .setOrigin(0.5)
      .setDepth(10)
      .setAlpha(0);

    // Animation d'entr√©e du message
    this.tweens.add({
      targets: [messageBg, messageText],
      alpha: 1,
      duration: 500,
      ease: 'Back.easeOut',
    });

    if (isCorrect) {
      this.gameComplete = true;

      // Animation de victoire am√©lior√©e
      this.tweens.add({
        targets: messageText,
        scaleX: 1.3,
        scaleY: 1.3,
        yoyo: true,
        duration: 400,
        ease: 'Back.easeOut',
        repeat: 2,
      });

      // Effet de confettis ou particules (simulation avec des cercles)
      const { height } = this.scale;
      for (let i = 0; i < 20; i++) {
        const confetti = this.add.circle(
          width / 2 + (Math.random() - 0.5) * 400,
          height / 2 + (Math.random() - 0.5) * 200,
          Math.random() * 8 + 4,
          Math.random() * 0xffffff
        );

        this.tweens.add({
          targets: confetti,
          y: confetti.y + Math.random() * 200 + 100,
          alpha: 0,
          duration: 2000,
          ease: 'Power2',
          delay: Math.random() * 500,
        });
      }

      // √âmettre l'√©v√©nement de victoire apr√®s un d√©lai
      this.time.delayedCall(2000, () => {
        this.events.emit('lesson:completed', { badge: badgeName });
      });
    } else {
      // Effacer le message d'erreur apr√®s un d√©lai et r√©activer le bouton
      this.time.delayedCall(2500, () => {
        messageText.destroy();
        messageBg.destroy();
        // R√©activer le bouton pour permettre un nouvel essai
        this.updateValidateButton();
      });
    }
  }

  private createPlaceholderCard(color: number): Phaser.GameObjects.Rectangle {
    return this.add
      .rectangle(0, 0, 180, 240, color)
      .setStrokeStyle(2, 0x6b7280);
  }

  // Fonction flipCard supprim√©e - plus n√©cessaire car tout le texte est visible
}
